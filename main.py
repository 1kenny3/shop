import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import Database
import config
from aiogram.dispatcher.filters import Text
import os
import shutil
import sys
import subprocess
import tempfile
import random
import string
from tokens import TokenManager
from dotenv import load_dotenv
import aiohttp
from aiohttp import web
import logging

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞
CITIES = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
DISTRICTS = {
    "–ú–æ—Å–∫–≤–∞": ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–Æ–∂–Ω—ã–π", "–°–µ–≤–µ—Ä–Ω—ã–π"],
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–í–∞—Å–∏–ª—å–µ–≤—Å–∫–∏–π", "–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π"],
    "–ö–∞–∑–∞–Ω—å": ["–í–∞—Ö–∏—Ç–æ–≤—Å–∫–∏–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π", "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π"]
}
PICKUP_POINTS = {
    "–ú–æ—Å–∫–≤–∞": {
        "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": ["—É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1", "–ü—É—à–∫–∏–Ω—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å, 2", "—É–ª. –ê—Ä–±–∞—Ç, 15"],
        "–Æ–∂–Ω—ã–π": ["–í–∞—Ä—à–∞–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, 26", "–ö–∞—à–∏—Ä—Å–∫–æ–µ —à–æ—Å—Å–µ, 10", "—É–ª. –ß–µ—Ä—Ç–∞–Ω–æ–≤—Å–∫–∞—è, 5"],
        "–°–µ–≤–µ—Ä–Ω—ã–π": ["–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä., 20", "—É–ª. –î—É–±–Ω–∏–Ω—Å–∫–∞—è, 7", "–î–º–∏—Ç—Ä–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, 12"]
    },
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": {
        "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π": ["–ù–µ–≤—Å–∫–∏–π –ø—Ä., 1", "—É–ª. –°–∞–¥–æ–≤–∞—è, 5", "–õ–∏—Ç–µ–π–Ω—ã–π –ø—Ä., 10"],
        "–í–∞—Å–∏–ª—å–µ–≤—Å–∫–∏–π": ["6-—è –ª–∏–Ω–∏—è –í.–û., 3", "–ë–æ–ª—å—à–æ–π –ø—Ä. –í.–û., 8", "–ú–∞–ª—ã–π –ø—Ä. –í.–û., 15"],
        "–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π": ["–ë–æ–ª—å—à–æ–π –ø—Ä. –ü.–°., 18", "–ö–∞–º–µ–Ω–Ω–æ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π –ø—Ä., 25", "—É–ª. –ö—É–π–±—ã—à–µ–≤–∞, 30"]
    },
    "–ö–∞–∑–∞–Ω—å": {
        "–í–∞—Ö–∏—Ç–æ–≤—Å–∫–∏–π": ["—É–ª. –ë–∞—É–º–∞–Ω–∞, 12", "—É–ª. –ö—Ä–µ–º–ª–µ–≤—Å–∫–∞—è, 5", "—É–ª. –ü—É—à–∫–∏–Ω–∞, 8"],
        "–°–æ–≤–µ—Ç—Å–∫–∏–π": ["—É–ª. –ì–≤–∞—Ä–¥–µ–π—Å–∫–∞—è, 20", "–ø—Ä. –ü–æ–±–µ–¥—ã, 15", "—É–ª. –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤, 10"],
        "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π": ["—É–ª. –ê–≤–∞–Ω–≥–∞—Ä–¥–Ω–∞—è, 7", "–ø—Ä. –Ø–º–∞—à–µ–≤–∞, 30", "—É–ª. –§—É—á–∏–∫–∞, 15"]
    }
}
PAYMENT_METHODS = ["VISA/MasterCard", "–ú–ò–†"]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
db = Database('shop.db')

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TokenManager
token_manager = TokenManager()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_product = State()
    waiting_for_district = State()
    waiting_for_pickup = State()
    waiting_for_payment = State()

class AdminStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_city = State()
    waiting_for_district = State()
    waiting_for_pickup = State()

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
class CreateBotState(StatesGroup):
    waiting_for_token = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üõç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    db.add_user(message.from_user.id, message.from_user.username)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞
    for city in CITIES:
        keyboard.add(InlineKeyboardButton(city, callback_data=f"city_{city}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    keyboard.row(
        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        InlineKeyboardButton("üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"
    keyboard.row(InlineKeyboardButton("ü§ñ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞", callback_data="share_bot"))
    
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω, {message.from_user.first_name}!\n\n"
        "üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(text="catalog")
async def show_catalog(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for city in CITIES:
        keyboard.add(InlineKeyboardButton(city, callback_data=f"city_{city}"))
    await callback.message.answer("üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)

@dp.callback_query_handler(text_startswith="city_")
async def choose_city(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split('_')[1]
    await state.update_data(city=city)
    
    products = db.get_all_products(city)
    if not products:
        await callback.message.answer(
            f"üòï –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}",
            reply_markup=get_main_keyboard()
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    for product in products:
        keyboard.add(InlineKeyboardButton(f"{product[1]} - {product[3]}‚ÇΩ", 
                                        callback_data=f"product_{product[0]}"))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    await callback.message.answer(
        "üõç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:", 
        reply_markup=keyboard
    )
    
    await OrderStates.waiting_for_product.set()

@dp.callback_query_handler(text_startswith="product_", state=OrderStates.waiting_for_product)
async def choose_product(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split('_')[1])
    product = db.get_product(product_id)
    await state.update_data(product_id=product_id, product_name=product[1], price=product[3])
    
    data = await state.get_data()
    city = data['city']
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    for district in DISTRICTS[city]:
        keyboard.add(InlineKeyboardButton(district, callback_data=f"district_{district}"))
    
    await callback.message.answer("üèò –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=keyboard)
    await OrderStates.waiting_for_district.set()

@dp.callback_query_handler(text_startswith="district_", state=OrderStates.waiting_for_district)
async def choose_district(callback: types.CallbackQuery, state: FSMContext):
    district = callback.data.split('_')[1]
    await state.update_data(district=district)
    
    data = await state.get_data()
    city = data['city']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—É–Ω–∫—Ç–∞–º–∏ –≤—ã–¥–∞—á–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    for pickup in PICKUP_POINTS[city][district]:
        keyboard.add(InlineKeyboardButton(pickup, callback_data=f"pickup_{pickup}"))
    
    await callback.message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:", reply_markup=keyboard)
    await OrderStates.waiting_for_pickup.set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–∫–∞–∑–∞
def generate_order_id():
    letters = string.ascii_uppercase
    numbers = string.digits
    return ''.join(random.choice(letters) for _ in range(2)) + ''.join(random.choice(numbers) for _ in range(4))

# –ò–∑–º–µ–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏
@dp.callback_query_handler(text_startswith="pickup_", state=OrderStates.waiting_for_pickup)
async def choose_pickup(callback: types.CallbackQuery, state: FSMContext):
    pickup = callback.data.split('_')[1]
    await state.update_data(pickup_point=pickup)
    
    data = await state.get_data()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
    order_id = generate_order_id()
    await state.update_data(order_id=order_id)
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    
    await callback.message.answer(
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:\n\n"
        f"üåÜ ID –∑–∞–∫–∞–∑–∞: #{order_id}\n"
        f"üåÜ –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üèò –†–∞–π–æ–Ω: {data['district']}\n"
        f"üìç –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: {pickup}\n"
        f"üõç –¢–æ–≤–∞—Ä: {data['product_name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ",
        reply_markup=keyboard
    )
    await OrderStates.waiting_for_payment.set()

@dp.callback_query_handler(text="cancel", state="*")
async def cancel_order(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ –≤ –∫–æ–º–∞–Ω–¥–µ /start
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞
    for city in CITIES:
        keyboard.add(InlineKeyboardButton(city, callback_data=f"city_{city}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.row(
        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        InlineKeyboardButton("üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
    keyboard.row(InlineKeyboardButton("ü§ñ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞", callback_data="share_bot"))
    
    await callback.message.answer(
        f"‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω\n\n"
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω, {callback.from_user.first_name}!\n\n"
        "üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:",
        reply_markup=keyboard
    )

@dp.callback_query_handler(text="pay", state=OrderStates.waiting_for_payment)
async def choose_payment(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(row_width=2)
    for method in PAYMENT_METHODS:
        keyboard.add(InlineKeyboardButton(method, callback_data=f"payment_{method}"))
    
    await callback.message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
    await OrderStates.waiting_for_payment.set()

@dp.callback_query_handler(text_startswith="payment_", state=OrderStates.waiting_for_payment)
async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    payment_method = callback.data.split('_')[1]
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.add_order(data['order_id'], callback.from_user.id, data['product_id'])
    
    await callback.message.answer(
        f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: {data['price']}‚ÇΩ\n\n"
        f"üÜî ID –∑–∞–∫–∞–∑–∞: #{data['order_id']}\n"
        f"üÜî –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞, –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è"
    )
    
    await state.finish()

@dp.callback_query_handler(text="balance")
async def show_balance(callback: types.CallbackQuery):
    user = db.get_user(callback.from_user.id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="add_money"))
    
    await callback.message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user[2]}‚ÇΩ",
        reply_markup=keyboard
    )

@dp.callback_query_handler(text="help")
async def show_help(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞–∂–º–∏—Ç–µ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª\n"
        "2. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–ë–∞–ª–∞–Ω—Å¬ª\n"
        "3. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–∂–º–∏—Ç–µ ¬´–ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @admin"
    )

@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product"),
        InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")
    )
    await message.answer("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)

@dp.callback_query_handler(text="add_product")
async def add_product_start(callback: types.CallbackQuery):
    if callback.from_user.id != config.ADMIN_ID:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    await AdminStates.waiting_for_name.set()
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=AdminStates.waiting_for_name)
async def add_product_name(message: types.Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        await state.finish()
        return
    
    await state.update_data(name=message.text)
    await AdminStates.waiting_for_description.set()
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message_handler(state=AdminStates.waiting_for_description)
async def add_product_description(message: types.Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        await state.finish()
        return
    
    await state.update_data(description=message.text)
    await AdminStates.waiting_for_price.set()
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

@dp.message_handler(state=AdminStates.waiting_for_price)
async def add_product_price(message: types.Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        await state.finish()
        return
    
    try:
        price = float(message.text)
        await state.update_data(price=price)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
        keyboard = InlineKeyboardMarkup(row_width=2)
        for city in CITIES:
            keyboard.add(InlineKeyboardButton(city, callback_data=f"addcity_{city}"))
        
        await AdminStates.waiting_for_city.set()
        await message.answer("üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=keyboard)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)!")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.callback_query_handler(text_startswith="addcity_", state=AdminStates.waiting_for_city)
async def add_product_city(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != config.ADMIN_ID:
        await state.finish()
        return
    
    city = callback.data.split('_')[1]
    await state.update_data(city=city)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–π–æ–Ω–∞–º–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    for district in DISTRICTS[city]:
        keyboard.add(InlineKeyboardButton(district, callback_data=f"adddistrict_{district}"))
    
    await AdminStates.waiting_for_district.set()
    await callback.message.answer("üèò –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=keyboard)

# –î–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
@dp.callback_query_handler(text_startswith="adddistrict_", state=AdminStates.waiting_for_district)
async def add_product_district(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != config.ADMIN_ID:
        await state.finish()
        return
    
    district = callback.data.split('_')[1]
    await state.update_data(district=district)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    city = data['city']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—É–Ω–∫—Ç–∞–º–∏ –≤—ã–¥–∞—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ —Ä–∞–π–æ–Ω–∞
    keyboard = InlineKeyboardMarkup(row_width=1)
    for pickup in PICKUP_POINTS[city][district]:
        keyboard.add(InlineKeyboardButton(pickup, callback_data=f"addpickup_{pickup}"))
    
    await AdminStates.waiting_for_pickup.set()
    await callback.message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:", reply_markup=keyboard)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏
@dp.callback_query_handler(text_startswith="addpickup_", state=AdminStates.waiting_for_pickup)
async def add_product_pickup(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != config.ADMIN_ID:
        await state.finish()
        return
    
    pickup = callback.data.split('_')[1]
    data = await state.get_data()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_product(data['name'], data['description'], data['price'], 
                  data['city'], data['district'], pickup)
    await state.finish()
    
    await callback.message.answer(
        "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥!\n\n"
        f"üì¶ –¢–æ–≤–∞—Ä: {data['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ\n"
        f"üåÜ –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üèò –†–∞–π–æ–Ω: {data['district']}\n"
        f"üìç –ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: {pickup}"
    )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"
@dp.callback_query_handler(text="change_city")
async def change_city(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞
    for city in CITIES:
        keyboard.add(InlineKeyboardButton(city, callback_data=f"city_{city}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    keyboard.row(
        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        InlineKeyboardButton("üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    
    await callback.message.answer("üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=keyboard)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query_handler(text="admin_stats")
async def show_stats(callback: types.CallbackQuery):
    if callback.from_user.id != config.ADMIN_ID:
        return
    
    stats = db.get_stats()
    
    city_info = "\n".join([f"- {city}: {count} —Ç–æ–≤–∞—Ä–æ–≤" for city, count in stats['city_stats']])
    creators_info = "\n".join([
        f"- @{username}: {count} –±–æ—Ç–æ–≤" for username, count in stats['top_creators']
    ]) or "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    await callback.message.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total_products']}\n"
        f"üõí –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {stats['total_sum']}‚ÇΩ\n\n"
        f"üåÜ –°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–≤: {stats['total_bots']}\n"
        f"üèÜ –¢–æ–ø —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –±–æ—Ç–æ–≤:\n{creators_info}\n\n"
        f"üåÜ –¢–æ–≤–∞—Ä—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º:\n{city_info}"
    )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query_handler(text="delete_product")
async def show_products_for_deletion(callback: types.CallbackQuery):
    if callback.from_user.id != config.ADMIN_ID:
        return
    
    products = db.get_all_products()
    if not products:
        await callback.message.answer("‚ùå –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for product in products:
        keyboard.add(InlineKeyboardButton(
            f"{product[1]} ({product[4]})", 
            callback_data=f"del_product_{product[0]}"
        ))
    
    await callback.message.answer("üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query_handler(text_startswith="del_product_")
async def delete_product(callback: types.CallbackQuery):
    if callback.from_user.id != config.ADMIN_ID:
        return
    
    product_id = int(callback.data.split('_')[2])
    db.delete_product(product_id)
    await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

# –î–æ–±–∞–≤–∏–º —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
class BroadcastState(StatesGroup):
    waiting_for_message = State()

@dp.callback_query_handler(text="broadcast")
async def broadcast_start(callback: types.CallbackQuery):
    if callback.from_user.id != config.ADMIN_ID:
        return
    
    await BroadcastState.waiting_for_message.set()
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")

@dp.message_handler(state=BroadcastState.waiting_for_message)
async def broadcast_send(message: types.Message, state: FSMContext):
    if message.from_user.id != config.ADMIN_ID:
        await state.finish()
        return
    
    users = db.cursor.execute('SELECT user_id FROM users').fetchall()
    sent = 0
    
    await message.answer("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user in users:
        try:
            await bot.send_message(user[0], message.text)
            sent += 1
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception:
            continue
    
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    await state.finish()

# –î–æ–±–∞–≤–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query_handler(text="orders")
async def show_user_orders(callback: types.CallbackQuery):
    orders = db.get_user_orders(callback.from_user.id)
    
    if not orders:
        await callback.message.answer("üòï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
    
    text = "üõí –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in orders:
        text += (f"üÜî –ó–∞–∫–∞–∑ #{order[0]}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {order[1]}\n"
                f"üí∞ –°—É–º–º–∞: {order[2]}‚ÇΩ\n"
                f"üìÖ –î–∞—Ç–∞: {order[3]}\n"
                f"üìã –°—Ç–∞—Ç—É—Å: {order[4]}\n\n")
    
    await callback.message.answer(text)

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º"
@dp.callback_query_handler(text="share_bot")
async def share_bot(callback: types.CallbackQuery):
    await callback.message.answer(
        "ü§ñ –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞:\n\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ @BotFather\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot\n"
        "3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞\n"
        "5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ':'",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_create")
        )
    )
    await CreateBotState.waiting_for_token.set()

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
@dp.callback_query_handler(text="cancel_create", state=CreateBotState.waiting_for_token)
async def cancel_create_bot(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤
running_bots = {}

# –î–æ–±–∞–≤–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±–æ—Ç–æ–≤
bot_apps = {}
WEBHOOK_HOST = 'your_domain.com'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
WEBHOOK_PORT = 8443  # –ü–æ—Ä—Ç –¥–ª—è webhook

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_all_handlers(dp, bot):
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_callback_query_handler(show_catalog, text="catalog")
    dp.register_callback_query_handler(choose_city, text_startswith="city_")
    dp.register_callback_query_handler(choose_product, text_startswith="product_", state=OrderStates.waiting_for_product)
    dp.register_callback_query_handler(choose_district, text_startswith="district_", state=OrderStates.waiting_for_district)
    dp.register_callback_query_handler(choose_pickup, text_startswith="pickup_", state=OrderStates.waiting_for_pickup)
    dp.register_callback_query_handler(cancel_order, text="cancel", state="*")
    dp.register_callback_query_handler(choose_payment, text="pay", state=OrderStates.waiting_for_payment)
    dp.register_callback_query_handler(process_payment, text_startswith="payment_", state=OrderStates.waiting_for_payment)
    dp.register_callback_query_handler(show_balance, text="balance")
    dp.register_callback_query_handler(show_help, text="help")
    dp.register_callback_query_handler(change_city, text="change_city")
    dp.register_callback_query_handler(show_user_orders, text="orders")
    dp.register_message_handler(admin_panel, commands=['admin'])
    dp.register_callback_query_handler(add_product_start, text="add_product")
    dp.register_callback_query_handler(show_stats, text="admin_stats")
    dp.register_callback_query_handler(show_products_for_deletion, text="delete_product")
    dp.register_callback_query_handler(delete_product, text_startswith="del_product_")
    dp.register_callback_query_handler(broadcast_start, text="broadcast")
    dp.register_callback_query_handler(share_bot, text="share_bot")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    dp.register_message_handler(add_product_name, state=AdminStates.waiting_for_name)
    dp.register_message_handler(add_product_description, state=AdminStates.waiting_for_description)
    dp.register_message_handler(add_product_price, state=AdminStates.waiting_for_price)
    dp.register_callback_query_handler(add_product_city, text_startswith="addcity_", state=AdminStates.waiting_for_city)
    dp.register_callback_query_handler(add_product_district, text_startswith="adddistrict_", state=AdminStates.waiting_for_district)
    dp.register_callback_query_handler(add_product_pickup, text_startswith="addpickup_", state=AdminStates.waiting_for_pickup)
    dp.register_message_handler(broadcast_send, state=BroadcastState.waiting_for_message)
    dp.register_callback_query_handler(cancel_create_bot, text="cancel_create", state=CreateBotState.waiting_for_token)
    dp.register_message_handler(process_token, state=CreateBotState.waiting_for_token)

# –ò–∑–º–µ–Ω–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
@dp.message_handler(state=CreateBotState.waiting_for_token)
async def process_token(message: types.Message, state: FSMContext):
    token = message.text.strip()
    
    if ':' not in token or not token.split(':')[0].isdigit():
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å ':'\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'"
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        new_bot = Bot(token=token)
        bot_info = await new_bot.get_me()
        session = await new_bot.get_session()
        await session.close()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ
        db.add_created_bot(message.from_user.id, bot_info.username, token)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª
        token_manager.add_token(
            token,
            bot_info.username,
            message.from_user.id,
            message.from_user.username or "Unknown"
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –±–æ—Ç–∞
        bot_folder = f"bots/{bot_info.username}"
        os.makedirs(bot_folder, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
        files_to_copy = ['main.py', 'database.py', 'tokens.py', 'config.py']
        for file in files_to_copy:
            shutil.copy2(file, bot_folder)
        
        # –°–æ–∑–¥–∞–µ–º config.py –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
        config_content = f"""BOT_TOKEN = "{token}"
ADMIN_ID = {config.ADMIN_ID}"""
        
        with open(os.path.join(bot_folder, 'config.py'), 'w') as f:
            f.write(config_content)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        subprocess.Popen(
            ['python3', 'main.py'] if os.name != 'nt' else ['python', 'main.py'],
            cwd=bot_folder,
            env={**os.environ, 'PYTHONPATH': bot_folder}
        )
        
        await message.answer(
            f"‚úÖ –ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n"
            "üöÄ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ /start"
        )
        
    except Exception as e:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
    finally:
        await state.finish()

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message_handler(commands=['tokens'])
async def show_tokens(message: types.Message):
    if message.from_user.id != config.ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
        return
    
    tokens = token_manager.get_all_tokens()
    if not tokens:
        await message.answer("ü§ñ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤")
        return
    
    text = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤:\n\n"
    for token_info in tokens:
        text += token_manager.format_token_info(token_info) + "\n\n"
    
    await message.answer(text)

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤
@dp.message_handler(commands=['mybots'])
async def show_my_bots(message: types.Message):
    tokens = token_manager.get_user_tokens(message.from_user.id)
    if not tokens:
        await message.answer("ü§ñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤")
        return
    
    text = "ü§ñ –í–∞—à–∏ –±–æ—Ç—ã:\n\n"
    for token_info in tokens:
        text += f"@{token_info['bot_username']}\n"
        text += f"üìÖ –°–æ–∑–¥–∞–Ω: {token_info['created_at']}\n\n"
    
    await message.answer(text)

# –ò–∑–º–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é main
async def main():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–æ—Ç–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('bots', exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())
